package com.shopify.service;

import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.shopify.entity.User;
import com.shopify.repo.UserRepository;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private PasswordEncoder passwordEncoder;

    public User createUser(User user){
        if(userRepo.existsByEmail(user.getEmail())){
            throw new RuntimeException("Email already exists");
        }
        if(userRepo.existsByPhone(user.getPhone())){
            throw new RuntimeException("Phone number already exists");
        }
        if(userRepo.existsByUsername(user.getUsername())){
            throw new RuntimeException("Username already exists");
        }

        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setCreatedAt(LocalDateTime.now());
        user.setUpdatedAt(LocalDateTime.now());

        return userRepo.save(user);
    }

    public List<User> getAllUsers(){
        return userRepo.findAll();
    }

    public User getUserById(Long uid){
        return userRepo.findByUid(uid)
            .orElseThrow(() -> new RuntimeException("User not found"));
    }

    public User updateUser(Long uid, User user){
        User existingUser = userRepo.findByUid(uid)
            .orElseThrow(() -> new RuntimeException("User not found"));

        existingUser.setUsername(user.getUsername());
        existingUser.setEmail(user.getEmail());
        existingUser.setPhone(user.getPhone());
        existingUser.setUpdatedAt(LocalDateTime.now());

        return userRepo.save(existingUser);
    }

    public void deleteUser(String email){
        if(!userRepo.existsByEmail(email)){
            throw new RuntimeException("User not found");
        }
        userRepo.deleteByEmail(email);
    }

    public List<User> getUsersByCreatedAfter(LocalDateTime createdAt){
        return userRepo.findByCreatedAtAfter(createdAt);
    }

    public boolean existsByEmail(String email){
        return userRepo.existsByEmail(email);
    }

    public boolean existsByPhone(String phone){
        return userRepo.existsByPhone(phone);
    }
}
